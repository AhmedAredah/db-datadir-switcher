name: Build and Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary_suffix: '.exe'
            artifact_name: 'dbswitcher-windows-amd64.exe'
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary_suffix: ''
            artifact_name: 'dbswitcher-linux-amd64'
          - os: macos-latest
            goos: darwin
            goarch: amd64
            binary_suffix: ''
            artifact_name: 'dbswitcher-darwin-amd64'
          - os: macos-latest
            goos: darwin
            goarch: arm64
            binary_suffix: ''
            artifact_name: 'dbswitcher-darwin-arm64'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libayatana-appindicator3-dev libwebkit2gtk-4.0-dev

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v ./...

    - name: Extract version from tag
      id: version
      shell: bash
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=true" >> $GITHUB_OUTPUT
        else
          VERSION="dev-$(echo $GITHUB_SHA | cut -c1-8)"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
        fi

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        go build \
          -ldflags "-s -w -X main.Version=${{ steps.version.outputs.VERSION }} -X main.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          -o ${{ matrix.artifact_name }} \
          main.go

    - name: Test binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x ${{ matrix.artifact_name }}
        ./${{ matrix.artifact_name }} version || true

    - name: Test binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        ./${{ matrix.artifact_name }} version || echo "Binary test completed"

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}
        retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/

    - name: Create checksums
      run: |
        cd artifacts
        for dir in */; do
          cd "$dir"
          sha256sum * > "${dir%/}.sha256"
          cd ..
        done
        find . -name "*.sha256" -exec cat {} \; > checksums.sha256

    - name: Generate changelog
      id: changelog
      run: |
        if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes since $PREV_TAG" >> $GITHUB_OUTPUT
          git log --oneline --no-merges $PREV_TAG..HEAD | sed 's/^/- /' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG=Initial release" >> $GITHUB_OUTPUT
        fi

    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: DBSwitcher v${{ steps.version.outputs.VERSION }}
        body: |
          # DBSwitcher v${{ steps.version.outputs.VERSION }}
          
          ## üì• Downloads
          
          Choose the appropriate binary for your platform:
          
          - **Windows (64-bit)**: `dbswitcher-windows-amd64.exe`
          - **Linux (64-bit)**: `dbswitcher-linux-amd64`
          - **macOS Intel**: `dbswitcher-darwin-amd64`
          - **macOS Apple Silicon**: `dbswitcher-darwin-arm64`
          
          ## üîç Verification
          
          Verify downloads using the provided SHA256 checksums.
          
          ## üìã Installation
          
          1. Download the binary for your platform
          2. Make it executable (Linux/macOS): `chmod +x dbswitcher-*`
          3. Run: `./dbswitcher-* version`
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## üõ†Ô∏è Build Information
          
          - **Go Version**: ${{ env.GO_VERSION }}
          - **Build Date**: ${{ github.run_id }}
          - **Commit**: ${{ github.sha }}
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') || contains(github.ref, 'rc') }}
        files: |
          artifacts/dbswitcher-windows-amd64.exe/dbswitcher-windows-amd64.exe
          artifacts/dbswitcher-linux-amd64/dbswitcher-linux-amd64
          artifacts/dbswitcher-darwin-amd64/dbswitcher-darwin-amd64
          artifacts/dbswitcher-darwin-arm64/dbswitcher-darwin-arm64
          artifacts/checksums.sha256